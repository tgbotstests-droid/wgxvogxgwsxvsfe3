// Telegram Bot with Command Handlers
import TelegramBot, { Message } from "node-telegram-bot-api";
import { storage } from "./storage";

// Default admin user ID - can access bot from any chat
const DEFAULT_ADMIN_ID = "861887555";

let botInstance: TelegramBot | null = null;
let botConfig: { token: string; chatId: string } | null = null;

export async function initializeTelegramBotWithCommands(userId: string) {
  try {
    const config = await storage.getBotConfig(userId);
    
    if (!config?.telegramBotToken || !config?.telegramChatId) {
      console.log("‚ö†Ô∏è Telegram bot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥");
      return null;
    }

    // Store config for validation
    botConfig = {
      token: config.telegramBotToken,
      chatId: config.telegramChatId,
    };

    // Stop existing bot if any
    if (botInstance) {
      await botInstance.stopPolling();
      botInstance = null;
    }

    // Create new bot instance with polling
    botInstance = new TelegramBot(config.telegramBotToken, { 
      polling: {
        interval: 1000,
        autoStart: true,
      }
    });

    // Register command handlers
    registerCommandHandlers(botInstance, userId, config.telegramChatId);
    
    console.log("‚úÖ Telegram –±–æ—Ç —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    return botInstance;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞:", error);
    return null;
  }
}

function registerCommandHandlers(
  bot: TelegramBot, 
  userId: string, 
  authorizedChatId: string
) {
  // Middleware to check if message is from authorized chat or default admin
  const isAuthorized = (msg: Message): boolean => {
    // Allow default admin from any chat
    if (msg.from && msg.from.id.toString() === DEFAULT_ADMIN_ID) {
      console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω default admin: ${DEFAULT_ADMIN_ID}`);
      return true;
    }
    
    // Support negative Chat IDs for group chats
    const chatId = msg.chat.id.toString();
    const isMatch = chatId === authorizedChatId || chatId === authorizedChatId.replace('-', '');
    
    if (isMatch) {
      console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Chat ID: ${chatId}`);
    } else {
      console.log(`‚õî –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: Chat ID ${chatId}, From ID ${msg.from?.id}`);
    }
    
    return isMatch;
  };

  // /start command
  bot.onText(/\/start/, async (msg) => {
    if (!isAuthorized(msg)) {
      await bot.sendMessage(msg.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–æ—Ç –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
      return;
    }

    const welcomeMessage = 
      `ü§ñ <b>Flash Loan Arbitrage Bot</b>\n\n` +
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–º –±–æ—Ç–æ–º.\n\n` +
      `<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n` +
      `/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n` +
      `/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏\n` +
      `/config - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n` +
      `/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n` +
      `/help - –ü–æ–º–æ—â—å –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏! üìä`;

    await bot.sendMessage(msg.chat.id, welcomeMessage, { parse_mode: "HTML" });
  });

  // /status command
  bot.onText(/\/status/, async (msg) => {
    if (!isAuthorized(msg)) {
      await bot.sendMessage(msg.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.");
      return;
    }

    try {
      const status = await storage.getBotStatus(userId);
      const config = await storage.getBotConfig(userId);

      if (!status) {
        await bot.sendMessage(msg.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞");
        return;
      }

      const statusEmoji = status.isRunning ? "üü¢" : "üî¥";
      const statusText = status.isRunning ? "–†–∞–±–æ—Ç–∞–µ—Ç" : "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω";
      const pausedInfo = status.isPaused ? `\n‚è∏Ô∏è <b>–ù–∞ –ø–∞—É–∑–µ:</b> ${status.pauseReason || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞"}` : "";

      const message = 
        `${statusEmoji} <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: ${statusText}</b>\n` +
        `${pausedInfo}\n\n` +
        `<b>–†–µ–∂–∏–º:</b> ${config?.networkMode === 'mainnet' ? 'üî¥ Mainnet' : 'üü° Testnet'}\n` +
        `<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b> ${status.activeOpportunities || 0}\n` +
        `<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫:</b> ${status.lastStartedAt ? new Date(status.lastStartedAt).toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞'}\n` +
        `<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞:</b> ${status.lastStoppedAt ? new Date(status.lastStoppedAt).toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞'}`;

      await bot.sendMessage(msg.chat.id, message, { parse_mode: "HTML" });
    } catch (error) {
      console.error("Error in /status command:", error);
      await bot.sendMessage(msg.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞");
    }
  });

  // /stats command
  bot.onText(/\/stats/, async (msg) => {
    if (!isAuthorized(msg)) {
      await bot.sendMessage(msg.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.");
      return;
    }

    try {
      const status = await storage.getBotStatus(userId);
      const transactions = await storage.getArbitrageTransactions(userId, 100);

      if (!status) {
        await bot.sendMessage(msg.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
        return;
      }

      const successCount = transactions.filter(t => t.status === 'SUCCESS').length;
      const failedCount = transactions.filter(t => t.status === 'FAILED').length;
      const totalCount = transactions.length;

      const message = 
        `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏</b>\n\n` +
        `üí∞ <b>–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:</b> $${Number(status.totalProfitUsd || 0).toFixed(2)}\n` +
        `üìà <b>–ü—Ä–∏–±—ã–ª—å –∑–∞ 24—á:</b> $${Number(status.net24hUsd || 0).toFixed(2)}\n` +
        `‚õΩ <b>–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ gas:</b> $${Number(status.gasCostUsd || 0).toFixed(2)}\n` +
        `üõ°Ô∏è <b>–°—Ç—Ä–∞—Ö–æ–≤–æ–π —Ñ–æ–Ω–¥:</b> $${Number(status.insuranceFundUsd || 0).toFixed(2)}\n\n` +
        `<b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n` +
        `‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${successCount} (${totalCount > 0 ? ((successCount / totalCount) * 100).toFixed(1) : 0}%)\n` +
        `‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failedCount}\n` +
        `üìù –í—Å–µ–≥–æ: ${totalCount}\n` +
        `üéØ <b>Success Rate:</b> ${Number(status.successRate || 0).toFixed(1)}%`;

      await bot.sendMessage(msg.chat.id, message, { parse_mode: "HTML" });
    } catch (error) {
      console.error("Error in /stats command:", error);
      await bot.sendMessage(msg.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
    }
  });

  // /config command
  bot.onText(/\/config/, async (msg) => {
    if (!isAuthorized(msg)) {
      await bot.sendMessage(msg.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.");
      return;
    }

    try {
      const config = await storage.getBotConfig(userId);

      if (!config) {
        await bot.sendMessage(msg.chat.id, "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        return;
      }

      const message = 
        `‚öôÔ∏è <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞</b>\n\n` +
        `<b>–°–µ—Ç—å:</b> ${config.networkMode === 'mainnet' ? 'üî¥ Mainnet (Polygon)' : 'üü° Testnet (Amoy)'}\n` +
        `<b>RPC:</b> ${config.networkMode === 'mainnet' ? config.polygonRpcUrl : config.polygonTestnetRpcUrl}\n\n` +
        `<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏:</b>\n` +
        `‚Ä¢ Min profit: ${config.minProfitPercent}%\n` +
        `‚Ä¢ Min net profit: ${config.minNetProfitPercent}%\n` +
        `‚Ä¢ Flash loan amount: $${config.flashLoanAmount}\n` +
        `‚Ä¢ Scan interval: ${config.scanInterval}s\n\n` +
        `<b>–õ–∏–º–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</b>\n` +
        `‚Ä¢ Max loan: $${config.maxLoanUsd}\n` +
        `‚Ä¢ Daily loss limit: $${config.dailyLossLimit}\n` +
        `‚Ä¢ Max single loss: $${config.maxSingleLossUsd}\n` +
        `‚Ä¢ Insurance fund: ${config.insuranceFundPercent}%\n\n` +
        `<b>Gas –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n` +
        `‚Ä¢ Max gas price: ${config.maxGasPriceGwei} Gwei\n` +
        `‚Ä¢ Priority fee: ${config.priorityFeeGwei} Gwei\n` +
        `‚Ä¢ Min net profit: $${config.minNetProfitUsd}\n\n` +
        `<b>–†–µ–∂–∏–º—ã:</b>\n` +
        `‚Ä¢ Real trading: ${config.enableRealTrading ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n` +
        `‚Ä¢ Simulation: ${config.useSimulation ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n` +
        `‚Ä¢ Auto pause: ${config.autoPauseEnabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}`;

      await bot.sendMessage(msg.chat.id, message, { parse_mode: "HTML" });
    } catch (error) {
      console.error("Error in /config command:", error);
      await bot.sendMessage(msg.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
    }
  });

  // /stop command
  bot.onText(/\/stop/, async (msg) => {
    if (!isAuthorized(msg)) {
      await bot.sendMessage(msg.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.");
      return;
    }

    try {
      const status = await storage.updateBotStatus(userId, {
        isRunning: false,
        lastStoppedAt: new Date(),
      });

      await bot.sendMessage(
        msg.chat.id, 
        `‚èπÔ∏è <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.`,
        { parse_mode: "HTML" }
      );
    } catch (error) {
      console.error("Error in /stop command:", error);
      await bot.sendMessage(msg.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞");
    }
  });

  // /help command
  bot.onText(/\/help/, async (msg) => {
    if (!isAuthorized(msg)) {
      await bot.sendMessage(msg.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.");
      return;
    }

    const helpMessage = 
      `üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n` +
      `<b>/start</b> - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n` +
      `–ü–æ–∫–∞–∂–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n\n` +
      `<b>/status</b> - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n` +
      `–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç: —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç, —Ä–µ–∂–∏–º —Å–µ—Ç–∏, –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n\n` +
      `<b>/stats</b> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏\n` +
      `–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç: –ø—Ä–∏–±—ã–ª—å, –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ gas, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫, success rate\n\n` +
      `<b>/config</b> - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è\n` +
      `–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏, –ª–∏–º–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ gas\n\n` +
      `<b>/stop</b> - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n` +
      `–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)\n\n` +
      `<b>/help</b> - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n` +
      `üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.\n` +
      `Telegram –∫–æ–º–∞–Ω–¥—ã –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!`;

    await bot.sendMessage(msg.chat.id, helpMessage, { parse_mode: "HTML" });
  });

  // Handle unknown commands
  bot.on('message', async (msg) => {
    // Ignore non-text messages
    if (!msg.text) return;
    
    // Ignore known commands (already handled)
    if (msg.text.startsWith('/start') || 
        msg.text.startsWith('/status') || 
        msg.text.startsWith('/stats') ||
        msg.text.startsWith('/config') ||
        msg.text.startsWith('/stop') ||
        msg.text.startsWith('/help')) {
      return;
    }

    // Check if it's a command
    if (msg.text.startsWith('/')) {
      if (!isAuthorized(msg)) {
        await bot.sendMessage(msg.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.");
        return;
      }

      await bot.sendMessage(
        msg.chat.id,
        `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${msg.text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`
      );
    }
  });

  console.log("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
}

export async function stopTelegramBot() {
  if (botInstance) {
    try {
      await botInstance.stopPolling();
      botInstance = null;
      botConfig = null;
      console.log("‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –±–æ—Ç–∞:", error);
    }
  }
}

export function getTelegramBotInstance() {
  return botInstance;
}
